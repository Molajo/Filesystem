<?php
namespace Ftp;

use Molajo\Filesystem\Adapter as fsAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-26 at 06:27:20.
 */
class FtpListTest extends Data
{
    private $class;

    /**
     * Initialises Adapter
     */
    protected function setUp()
    {
        parent::setUp();

        /** initialise call */
        $this->filesystem_type = 'Ftp';
        $this->action          = 'getList';

        return;
    }

    /**
     * Return the folder matching the patch (1 result)
     *
     * @covers Molajo\Filesystem\Type\Ftp::getList
     */
    public function testListDirectory()
    {
        $temp = BASE_FOLDER . '/.dev/Tests/Data/Testcases';

        $this->options = array(
            'recursive'       => false,
            'exclude_files'   => false,
            'exclude_folders' => false,
            'extension_list'  => array(),
            'name_mask'       => null
        );
        $this->path    = BASE_FOLDER . '/.dev/Tests/Data/Testcases/';

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertEquals(1, count($adapter->fs->data));

        return;
    }

    /**
     * Return all files and folders
     *
     * @covers Molajo\Filesystem\Type\Ftp::getList
     */
    public function TestListAll()
    {
        $temp = BASE_FOLDER . '/.dev/Tests/Data/Testcases';

        $this->options = array(
            'recursive'       => true,
            'exclude_files'   => false,
            'exclude_folders' => false,
            'extension_list'  => array(),
            'name_mask'       => null
        );
        $this->path    = BASE_FOLDER . '/.dev/Tests/Data/Testcases/';

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertEquals(38, count($adapter->fs->data));

        return;
    }

    /**
     * Exclude Files
     *
     * @covers Molajo\Filesystem\Type\Ftp::getList
     */
    public function testListExcludeFiles()
    {
        $temp = BASE_FOLDER . '/.dev/Tests/Data/Testcases';

        $this->options = array(
            'recursive'       => true,
            'exclude_files'   => true,
            'exclude_folders' => false,
            'extension_list'  => array(),
            'name_mask'       => null
        );
        $this->path    = BASE_FOLDER . '/.dev/Tests/Data/Testcases/';

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertEquals(10, count($adapter->fs->data));

        return;
    }

    /**
     * Exclude Folders
     *
     * @covers Molajo\Filesystem\Type\Ftp::getList
     */
    public function testListExcludeFolders()
    {
        $temp = BASE_FOLDER . '/.dev/Tests/Data/Testcases';

        $this->options = array(
            'recursive'       => true,
            'exclude_files'   => false,
            'exclude_folders' => true,
            'extension_list'  => array(),
            'name_mask'       => null
        );
        $this->path    = BASE_FOLDER . '/.dev/Tests/Data/Testcases/';

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertEquals(28, count($adapter->fs->data));

        return;
    }

    /**
     * Mask
     *
     * @covers Molajo\Filesystem\Type\Ftp::getList
     */
    public function testListMask()
    {
        $temp = BASE_FOLDER . '/.dev/Tests/Data/Testcases';

        $this->options = array(
            'recursive'       => true,
            'exclude_files'   => false,
            'exclude_folders' => false,
            'extension_list'  => array(),
            'name_mask'       => '2'
        );

        $this->path    = BASE_FOLDER . '/.dev/Tests/Data/Testcases/';

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertEquals(38, count($adapter->fs->data));

        return;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
}
