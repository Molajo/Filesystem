<?php
namespace Local;

use Exception;
use Molajo\Filesystem\Exception\FilesystemException;

use Molajo\Filesystem\Adapter as fsAdapter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-26 at 06:27:20.
 */
class LocalWriteTest extends Data
{
    /**
     * Initialises Adapter
     */
    protected function setUp()
    {
        parent::setUp();

        $this->filesystem_type = 'Local';
        $this->action          = 'Write';
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::write
     */
    public function testSuccessfulWrite()
    {
        if (file_exists(BASE_FOLDER . '/.dev/Tests' . '/' . 'test2.txt')) {
            \unlink(BASE_FOLDER . '/.dev/Tests' . '/' . 'test2.txt');
        }

        $temp = 'test2.txt';

        $this->options = array(
            'file'    => $temp,
            'replace' => false,
            'data'    => 'Here are the words to write.',
        );

        $this->path = BASE_FOLDER . '/.dev/Tests';

        $this->assertfileNotExists($this->path . '/' . $temp);

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertfileExists($this->path . '/' . $temp);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::write
     */
    public function testSuccessfulRewrite()
    {
        $temp = 'test2.txt';

        $this->options = array(
            'file'    => $temp,
            'replace' => true,
            'data'    => 'Here are the words to write.',
        );

        $this->path = BASE_FOLDER . '/.dev/Tests';

        if (file_exists($this->path . '/' . $temp)) {
        } else {
            \file_put_contents($this->path . '/' . $temp, 'data');
        }

        $this->assertfileExists($this->path . '/' . $temp);

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertfileExists($this->path . '/' . $temp);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::write
     * @expectedException Molajo\Filesystem\Exception\FilesystemException
     */
    public function testUnsuccessfulRewrite()
    {
        $temp = 'test2.txt';

        $this->options = array(
            'file'    => $temp,
            'replace' => false,
            'data'    => 'Here are the words to write.',
        );

        $this->path = BASE_FOLDER . '/.dev/Tests';

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::write
     */
    public function testWriteSingleFolder()
    {
        $temp = 'OneMoreFolder';

        $this->options = array(
            'file'    => $temp,
            'replace' => false,
            'data'    => ''
        );

        $this->path = BASE_FOLDER . '/.dev/Tests/Data';

        $this->assertfileNotExists($this->path . '/' . $temp);

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertfileExists($this->path . '/' . $temp);

        return;
    }

    /**
     * rmdir($filePath);
     *  unlink($filePath);
     *
     * @covers Molajo\Filesystem\Type\Local::write
     */
    public function testWriteMultipleFolders()
    {
        $temp = 'sometimes.txt';

        $this->options = array(
            'file'    => $temp,
            'replace' => false,
            'data'    => 'Poop'
        );

        $this->path = BASE_FOLDER . '/.dev/Tests/Data/OneMoreFolder/Cats/love/Dogs';

        $this->assertfileNotExists($this->path . '/' . $temp);

        $adapter = new fsAdapter($this->action, $this->path, $this->filesystem_type, $this->options);

        $this->assertfileExists($this->path . '/' . $temp);

        return;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
}
