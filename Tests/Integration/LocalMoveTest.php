<?php
namespace Tests\Integration;

use \PHPUnit_Framework_TestCase;

use Molajo\Filesystem\Adapter;

use Molajo\Filesystem\Exception\FileNotFoundException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-26 at 06:27:20.
 */
class LocalMoveTest extends Data
{
    /**
     * @var Adapter Name
     */
    protected $filesystem_type;

    /**
     * @var Action
     */
    protected $action;

    /**
     * @var Path
     */
    protected $path;

    /**
     * @var Options
     */
    protected $options = array();

    /**
     * @var Filesystem
     */
    protected $fs;

    /**
     * @var Directories
     */
    protected $directories;

    /**
     * @var  Files
     */
    protected $files;

    /**
     * Initialises Adapter
     */
    protected function setUp()
    {
        parent::setUp();

        /** initialise call */
        $this->fs_name = 'Local';
        $this->action       = 'Move';

        return;
    }

    /**
     * Should default target directory to $this->path
     *
     * @covers Molajo\Filesystem\Type\Local::copyOrMove
     */
    public function testSuccessfulMoveSingleFileBlankDirectory()
    {
        $temp = BASE_FOLDER . '/Tests/Data/Testcases';

        $this->options = array(
            'target_directory'       => '',
            'target_name'            => 'test2.txt',
            'replace'                => false,
            'target_filesystem_type' => 'Local'
        );

        $this->path    = BASE_FOLDER . '/Tests/Data/Testcases/test1.txt';

        $connect = new Adapter($this->fs_name, $this->path, $this->action, $this->options);

        $this->assertfileExists($temp . '/test2.txt');
        $this->assertfileNotExists($this->path);

        return;
    }


    /**
     * @covers Molajo\Filesystem\Type\Local::copyOrMove
     */
    public function testSuccessfulMoveSingleFile()
    {
        $temp = BASE_FOLDER . '/Tests/Data/Testcases';

        $this->options = array(
            'target_directory'       => '',
            'target_name'            => 'test2.txt',
            'replace'                => false,
            'target_filesystem_type' => 'Local'
        );
        $this->path    = BASE_FOLDER . '/Tests/Data/Testcases/test1.txt';

        $connect = new Adapter($this->fs_name, $this->path, $this->action, $this->options);

        $this->assertfileExists($temp . '/test2.txt');
        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::copyOrMove
     */
    public function testCreateSingleFolder()
    {
        $temp = BASE_FOLDER . '/Tests/Data';

        $this->options = array(
            'target_directory'       => $temp,
            'target_name'            => 'didit',
            'replace'                => false,
            'target_filesystem_type' => 'Local'
        );
        $this->path    = BASE_FOLDER . '/Tests/Data/doit';

        $connect = new Adapter($this->fs_name, $this->path, $this->action, $this->options);

        $this->assertfileExists($temp . '/didit');
        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::copyOrMove
     */
    public function testMoveMultipleFolder()
    {
        $temp = BASE_FOLDER . '/Tests/Data';

        $this->options = array(
            'target_directory'       => $temp,
            'target_name'            => 'Amy',
            'replace'                => false,
            'target_filesystem_type' => 'Local'
        );
        $this->path    = BASE_FOLDER . '/Tests/Data/Testcases';

        $connect = new Adapter($this->fs_name, $this->path, $this->action, $this->options);

        $this->assertfileExists($temp . '/Amy');
        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::copyOrMove
     * @expectedException Molajo\Filesystem\Exception\FileException
     */
    public function testNotAFile()
    {
        $this->options = array(
            'target_directory'       => BASE_FOLDER . '/Tests/Data',
            'target_name'            => 'Amy',
            'replace'                => false,
            'target_filesystem_type' => 'Local'
        );

        $this->path    = BASE_FOLDER . '/Tests/Dataeeeeee';
        $connect       = new Adapter($this->fs_name, $this->path, $this->action, $this->options);

        return;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

}
