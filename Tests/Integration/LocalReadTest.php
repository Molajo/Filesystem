<?php
namespace Tests\Integration;

use \PHPUnit_Framework_TestCase;

use Molajo\Filesystem\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-26 at 06:27:20.
 */
class LocalReadTest extends Data
{
    /**
     * @var Adapter Name
     */
    protected $adapter_name;

    /**
     * @var Path
     */
    protected $path;

    /**
     * @var Options
     */
    protected $options = array();

    /**
     * @var Filesystem
     */
    protected $filesystem;

    /**
     * Initialises Adapter
     */
    protected function setUp()
    {
        parent::setUp();

        $this->adapter_name = 'Local';
        $this->action       = 'Read';
        $this->path         = BASE_FOLDER . '/Tests/Data/test1.txt';
        $this->options      = array();
    }

    /**
     * @covers Molajo\Filesystem\Targetinterface\Local::read
     */
    public function testSuccessfulRead()
    {
        $connect = new Adapter($this->adapter_name, $this->path, $this->action, $this->options = array());

        $this->assertEquals('Local', $connect->filesystem_type_object->filesystem_type);
        $this->assertEquals('/', $connect->filesystem_type_object->root);
        $this->assertEquals(1, $connect->filesystem_type_object->persistence);
        $this->assertEquals(0755, $connect->filesystem_type_object->directory_permissions);
        $this->assertEquals(0644, $connect->filesystem_type_object->file_permissions);
        $this->assertEquals(1, $connect->filesystem_type_object->read_only);
        $this->assertEquals(true, $connect->filesystem_type_object->is_readable);
        $this->assertEquals(true, $connect->filesystem_type_object->is_writable);
        $this->assertEquals(false, $connect->filesystem_type_object->is_executable);
        $this->assertEquals(
            BASE_FOLDER . '/Tests/Data/test1.txt',
            $connect->filesystem_type_object->path
        );
        $this->assertEquals(true, $connect->filesystem_type_object->exists);
        $this->assertEquals(
            BASE_FOLDER . '/Tests/Data/test1.txt',
            $connect->filesystem_type_object->absolute_path
        );
        $this->assertEquals(true, $connect->filesystem_type_object->is_absolute);
        $this->assertEquals(false, $connect->filesystem_type_object->is_directory);
        $this->assertEquals(true, $connect->filesystem_type_object->is_file);
        $this->assertEquals(false, $connect->filesystem_type_object->is_link);
        $this->assertEquals('file', $connect->filesystem_type_object->type);
        $this->assertEquals('test1.txt', $connect->filesystem_type_object->name);
        $this->assertEquals(
            BASE_FOLDER . '/Tests/Data',
            $connect->filesystem_type_object->parent
        );
        $this->assertEquals('txt', $connect->filesystem_type_object->extension);
        $this->assertEquals(18, $connect->filesystem_type_object->size);
        $this->assertEquals('text/plain; charset=us-ascii', $connect->filesystem_type_object->mime_type);

        $this->assertEquals('yabba, dabba, doo', trim($connect->action_results));

        return;
    }

    /**
     * @covers Molajo\Filesystem\Targetinterface\Local::read
     * @expectedException Molajo\Filesystem\Exception\FileNotFoundException
     */
    public function testUnsuccessfulRead()
    {
        $this->path = BASE_FOLDER . '/Tests/Data/testreally-is-not-there.txt';
        $connect    = new Adapter($this->adapter_name, $this->path, $this->action, $this->options = array());

        return;
    }

    /**
     * @covers Molajo\Filesystem\Targetinterface\Local::read
     * @expectedException Molajo\Filesystem\Exception\FileNotFoundException
     */
    public function testNotAFile()
    {
        $this->path = BASE_FOLDER . '/Tests';
        $connect    = new Adapter($this->adapter_name, $this->path, $this->action, $this->options = array());

        return;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

}
