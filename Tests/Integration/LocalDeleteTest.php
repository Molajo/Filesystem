<?php
namespace Tests\Integration;

use \PHPUnit_Framework_TestCase;

use Molajo\Filesystem\Adapter;
use Molajo\Filesystem\Exception\FileNotFoundException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-26 at 06:27:20.
 */
class LocalDeleteTest extends Data
{
    /**
     * @var Adapter Name
     */
    protected $adapter_name;

    /**
     * @var Action
     */
    protected $action;

    /**
     * @var Path
     */
    protected $path;

    /**
     * @var Options
     */
    protected $options = array();

    /**
     * @var Filesystem
     */
    protected $filesystem;

    /**
     * @var Directories
     */
    protected $directories;

    /**
     * @var Files
     */
    protected $files;

    /**
     * Initialises Adapter
     */
    protected function setUp()
    {
        parent::setUp();

        /** initialise call */
        $this->adapter_name = 'Local';
        $this->action       = 'Delete';

        $this->options = array(
            'delete_empty' => false
        );

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::delete
     */
    public function testSuccessfulDeleteSingleFile()
    {
        $this->options = array(
            'delete_empty' => false
        );
        $this->path    = BASE_FOLDER . '/Tests/Data/Testcases/test1.txt';

        $this->assertfileExists($this->path);

        $connect = new Adapter($this->adapter_name, $this->path, $this->action, $this->options);

        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::delete
     */
    public function testCreateSingleFolder()
    {
        $this->options = array(
            'delete_empty' => true
        );
        $this->path    = BASE_FOLDER . '/Tests/Data/doit';

        $this->assertfileExists($this->path);

        $connect = new Adapter($this->adapter_name, $this->path, $this->action, $this->options);

        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::delete
     */
    public function testDeleteMultipleFolderOnlyFiles()
    {
        $this->options = array(
            'delete_empty' => false
        );

        $this->path    = BASE_FOLDER . '/Tests/Data/Testcases/Directorytree1';

        $this->assertfileExists($this->path);

        $connect       = new Adapter($this->adapter_name, $this->path, $this->action, $this->options);

        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::delete
     */
    public function testDeleteMultipleFolderDeleteAll()
    {
        $this->options = array(
            'delete_empty' => true
        );

        $this->path    = BASE_FOLDER . '/Tests/Data';

        $this->assertfileExists($this->path);

        $connect       = new Adapter($this->adapter_name, $this->path, $this->action, $this->options);

        $this->assertfileNotExists($this->path);

        return;
    }

    /**
     * @covers Molajo\Filesystem\Type\Local::delete
     * @expectedException Molajo\Filesystem\Exception\FileNotFoundException
     */
    public function testNotAFile()
    {
        $this->options = array(
            'delete_empty' => true
        );

        $this->path    = BASE_FOLDER . '/Tests/Dataeeeeee';

        $connect       = new Adapter($this->adapter_name, $this->path, $this->action, $this->options);

        return;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }
}
